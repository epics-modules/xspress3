#######################################################
# Database records for the Xspress3
# Matthew Pearson
# Sept 2012
#
# Channel dependant records are in xspress3Channel.template
# Channel SCA records are in xspress3ChannelSCA.template, xspress3ChannelSCANoLimits.template
# and xspress3ChannelSCAThreshold.template, depending on the type of SCA.
# Records to control live data update are in xspress3DataUpdate.template
#
# Macros:
# % macro,  P,           Device prefix
# % macro,  R,           Device suffix
# % macro,  PORT,        Asyn port name
# % macro,  ADDR,        Asyn address (set to zero)
# % macro,  TIMEOUT,     Asyn timeout
# % macro,  MAX_SPECTRA, The maximum number of frames that can be acquired in one acquisition (eg. 16384)
# % macro,  MAX_FRAMES,  The maximum size of each spectra (eg. 4096) in a scan.
#
#######################################################

include "ADBase.template"
include "xspress3_highlevel.template"

# /// 
# /// Reset the device.
# ///
record(bo, "$(P)$(R)RESET")
{
    field(DTYP,"asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_RESET")
    field(ZNAM,"Done")	
    field(ONAM,"Reset")
}

# /// 
# /// Erase MCA data.
# ///
record(bo,"$(P)$(R)ERASE") 
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_ERASE")
    field(ZNAM,"Done")
    field(ONAM,"Erase")
}

record(bi, "$(P)$(R)Acquire_RBV") {
   field(OSV,  "NO_ALARM")
}

# ///
# /// Set whether Acquire erases first
# ///
record(bo, "$(P)$(R)EraseOnStart") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))XSP3_ERASESTART")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "1")
}

# ///
# /// Operates the manual advance
# ///
record(bo, "$(P)$(R)SoftTrigger") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))XSP3_SOFT_TRIGGER")
   field(ZNAM, "Idle")
   field(ONAM, "Trigger")
   field(VAL,  "0")
}
# ///
# /// Reads the manual advance parameter
# ///
record(bi, "$(P)$(R)SoftTrigger_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))XSP3_SOFT_TRIGGER")
   field(ZNAM, "Idle")
   field(ONAM, "Trigger")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the numer of channels to read out.
# ///
record(longout, "$(P)$(R)NUM_CHANNELS")
{
   field(PINI, "YES")	
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_NUM_CHANNELS")
   field(VAL,  "1")
}


# ///
# /// Read the number of channels
# ///
record(longin, "$(P)$(R)NUM_CHANNELS_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_NUM_CHANNELS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Read the max number of channels supported by the system
# ///
record(longin, "$(P)$(R)MAX_NUM_CHANNELS_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_MAX_NUM_CHANNELS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Select the trigger source (internal or external).
# ///
record(mbbo, "$(P)$(R)TriggerMode")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_TRIGGER_MODE")
   field(ZRST, "Software")
   field(ZRVL, "0")
   field(ONST, "Internal")
   field(ONVL, "1")
   field(TWST, "IDC")
   field(TWVL, "2")
   field(THST, "TTL Veto Only")
   field(THVL, "3")
   field(FRST, "TTL Both")
   field(FRVL, "4")
   field(FVST, "LVDS Veto Only")
   field(FVVL, "5")
   field(SXST, "LVDS Both")
   field(SXVL, "6")
   field(SVST, "Software + Internal")
   field(SVVL, "7")
   field(EIST, "TTL + Internal")
   field(EIVL, "8")
   field(VAL,  "0")
   field(PINI, "NO")
}

# ///
# /// Read the trigger source (internal or external).
# ///
record(mbbi, "$(P)$(R)TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_TRIGGER_MODE")
   field(ZRST, "Software")
   field(ZRVL, "0")
   field(ONST, "Internal")
   field(ONVL, "1")
   field(TWST, "IDC")
   field(TWVL, "2")
   field(THST, "TTL Veto Only")
   field(THVL, "3")
   field(FRST, "TTL Both")
   field(FRVL, "4")
   field(FVST, "LVDS Veto Only")
   field(FVVL, "5")
   field(SXST, "LVDS Both")
   field(SXVL, "6")
   field(SVST, "Software + Internal")
   field(SVVL, "7")
   field(EIST, "TTL + Internal")
   field(EIVL, "8")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set whether the sense of F0 is inverted
# /// (only used in LVDS_BOTH and TTL_BOTH modes)
# ///
record(bo, "$(P)$(R)TRIGGER")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_TRIGGER")
   field(ZNAM,"Do Nothing")	
   field(ONAM,"Trigger")
}

# ///
# /// Set whether the sense of F0 is inverted
# /// (only used in LVDS_BOTH and TTL_BOTH modes)
# ///
record(longout, "$(P)$(R)INVERT_F0")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_INVERT_F0")
   field(VAL,  "0")
}

# ///
# /// Set whether the sense of F0 is inverted
# /// (only used in LVDS_BOTH and TTL_BOTH modes)
# ///
record(longin, "$(P)$(R)INVERT_F0_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_INVERT_F0")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set whether the sense of VETO is inverted
# /// (only used in LVDS, LVDS_BOTH, TTL and TTL_BOTH modes)
# ///
record(longout, "$(P)$(R)INVERT_VETO")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_INVERT_VETO")
   field(VAL,  "0")
}

# ///
# /// Set whether the sense of VETO is inverted
# /// (only used in LVDS, LVDS_BOTH, TTL and TTL_BOTH modes)
# ///
record(longin, "$(P)$(R)INVERT_VETO_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_INVERT_VETO")
   field(SCAN, "I/O Intr")
}

# ///
# /// Sets the trigger debounce time in 80 MHz cycles
# ///
record(longout, "$(P)$(R)DEBOUNCE")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_DEBOUNCE")
   field(VAL,  "0")
}

# ///
# /// Sets the trigger debounce time in 80 MHz cycles
# ///
record(longin, "$(P)$(R)DEBOUNCE_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_DEBOUNCE")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the fixed time register, in Software trigger mode.
# /// This sets the number of the first time frame (not normally used).
# ///
#record(longout, "$(P)$(R)FIXED_TIME")
#{
#   field(DTYP, "asynInt32")
#   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_FIXED_TIME")
#   field(VAL,  "0")
#}

# ///
# /// Get the fixed time register, used for Software trigger mode.
# /// This sets the number of the first time frame (not normally used).
# ///
#record(longin, "$(P)$(R)FIXED_TIME_RBV")
#{
#   field(PINI, "YES")
#   field(DTYP, "asynInt32")
#   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_FIXED_TIME")
#   field(SCAN, "I/O Intr")
#}


# ///
# /// Set the numer of frames to configure the system with.
# ///
record(longout, "$(P)$(R)NUM_FRAMES_CONFIG")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_NUM_FRAMES_CONFIG")
   field(VAL,  "0")
}

# ///
# /// Get the numer of frames to configure the system with.
# ///
record(longin, "$(P)$(R)NUM_FRAMES_CONFIG_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_NUM_FRAMES_CONFIG")
   field(SCAN, "I/O Intr")
}


# ///
# /// Get the number of xspress3 cards to set up. 
# /// This is used in the xsp3_config function. It is passed into the 
# /// driver config function at IOC startup.
# ///
record(longin, "$(P)$(R)NUM_CARDS_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_NUM_CARDS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the path used for the file configuration. 
# /// This is used in the xsp3_restore_settings function.
# ///
record(waveform, "$(P)$(R)CONFIG_PATH")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_CONFIG_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

# ///
# /// Get the path used for the file configuration. 
# /// This is used in the xsp3_restore_settings function.
# ///
record(waveform, "$(P)$(R)CONFIG_PATH_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_CONFIG_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}


# ///
# /// Set the path used for config file saving.
# /// This is used in the xsp3_save_settings function.
# ///
record(waveform, "$(P)$(R)CONFIG_SAVE_PATH")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_CONFIG_SAVE_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

# ///
# /// Get the path used for config file saving.
# /// This is used in the xsp3_save_settings function.
# ///
record(waveform, "$(P)$(R)CONFIG_SAVE_PATH_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_CONFIG_SAVE_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# ///
# /// Connect to the xspress3. This runs the xsp3_config function as
# /// well as some other setup functions.
# ///
record(bo, "$(P)$(R)CONNECT")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_CONNECT")
   field(ZNAM,"Connect")
   field(ONAM,"Connect")	
}

# /// 
# /// Show the connected status.
# ///
record(bi,"$(P)$(R)CONNECTED") {
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_CONNECTED")
    field(ZNAM,"Disconnected")
    field(ONAM,"Connected")
    field(VAL, "0")
    field(SCAN, "I/O Intr")
}


# ///
# /// Disconnect from the xspress3. This runs the xsp3_close function as
# /// well as some other setup functions.
# ///
record(bo, "$(P)$(R)DISCONNECT")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_DISCONNECT")
   field(ZNAM,"Disconnect")
   field(ONAM,"Disconnect")	
}

# ///
# /// Save the current xspress3 settings to a file. This makes use of the 
# /// API function xsp3_save_settings(). This does nothing if we are not 
# /// connected or CONFIG_PATH is not set.
# ///
record(bo, "$(P)$(R)SAVE_SETTINGS")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_SAVE_SETTINGS")
   field(ZNAM,"Save")
   field(ONAM,"Save")	
}


# ///
# /// Restore the xspress3 settings from a file. This makes use of the 
# /// API function xsp3_save_settings(). This does nothing if we are not 
# /// connected or CONFIG_PATH is not set.
# ///
record(bo, "$(P)$(R)RESTORE_SETTINGS")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_RESTORE_SETTINGS")
   field(ZNAM,"Restore")
   field(ONAM,"Restore")	
}


# ///
# /// Set the max number of elements in a spectra. This is a database parameter, so the
# /// record has DISP=1 so it can't be changed at runtime.
# ///
record(longout, "$(P)$(R)MAX_SPECTRA")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_MAX_SPECTRA")
   field(VAL,  "$(MAX_SPECTRA)")
   field(DISP, "1")
   field(FLNK, "$(P)$(R)MAX_SPECTRA_RBV.PROC")
}

# ///
# /// Read the max spectra size from the driver. This was set at startup
# /// by $(P)$(R)MAX_SPECTRA.
# ///
record(longin, "$(P)$(R)MAX_SPECTRA_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_MAX_SPECTRA")
   field(SCAN, "I/O Intr")
}


# ///
# /// Read the max number of frames from the driver. This is the max allowed number
# /// for the $(P)$(R)NUM_FRAMES_CONFIG record. This was set at startup in the driver config.
# ///
record(longin, "$(P)$(R)MAX_FRAMES_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_MAX_FRAMES")
   field(SCAN, "I/O Intr")
   field(PINI, "YES")
}

# ///
# /// This is the maximum number of frames allowed for a single acqusition. This is set in the 
# /// database when building the IOC, and also set in the driver IOC config function. This determins
# /// how big the driver and waveform arrays are.
# ///
record(longout, "$(P)$(R)MAX_FRAMES_DRIVER_RBV")
{
   field(PINI, "YES")
   field(DTYP, "Soft Channel")
   field(VAL,  "$(MAX_FRAMES)")
   field(DISP, "1")
}


# ///
# /// Read the number of frames acquired in an acquisition. This is
# /// updated during an acqusition.
# ///
record(longin, "$(P)$(R)FRAME_COUNT_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_FRAME_COUNT")
   field(SCAN, "I/O Intr")
}


# ///
# /// Set the run flags. This can be used to readout playback data
# /// instead of normal data. 
# /// This has to be done at connect time.
# ///
record(mbbo, "$(P)$(R)RUN_FLAGS")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_RUN_FLAGS")
   field(ZRST, "SCALERS & HIST")
   field(ZRVL, "0")
   field(ONST, "PLAYB, SCALERS & HIST")
   field(ONVL, "1")
   field(VAL,  "0")
}

# ///
# /// Read the run flags. This can be used to readout playback data
# /// instead of normal data. 
# /// This has to be done at connect time.
# ///
record(mbbi, "$(P)$(R)RUN_FLAGS_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_RUN_FLAGS")
   field(ZRST, "SCALERS & HIST")
   field(ZRVL, "0")
   field(ONST, "PLAYB, SCALERS & HIST")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

# ///
# /// Disable or enable DTC calculations.
# /// These corrections are done by the Xspress3 API in the detector 
# /// thread. So they slow down acqusition.
# ///
record(bo,"$(P)$(R)CTRL_DTC") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_CTRL_DTC")
    field(ZNAM,"Disable")
    field(ONAM,"Enable")
    field(PINI, "YES")
    field(VAL, "1")
}

# /// 
# /// Readback disable or enable DTC calculations.
# /// These corrections are done by the Xspress3 API in the detector 
# /// thread. So they slow down acqusition.
# ///
record(bi, "$(P)$(R)CTRL_DTC_RBV")
{
    field(DTYP,"asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_CTRL_DTC")
    field(ZNAM,"Disabled")	
    field(ONAM,"Enabled")
    field(SCAN, "I/O Intr")	
}

# ///
# /// Disable this ADBase record scanning.
# ///
record(ai, "$(P)$(R)PoolUsedMem")
{
   field(SCAN, "Passive")
}

# ///
# /// Name of this detector
# ///
record(stringout, "$(P)$(R)NAME")
{
   field(VAL, "Xspress3")
   field(DESC, "Xspress3 EPICS Control")
}

#Set DISA for PVs in ADBase that do not apply to Xspress3

record(mbbo, "$(P)$(R)DataType")
{
    field(DISA, "1")
}
record(mbbi, "$(P)$(R)DataType_RBV")
{
    field(DISA, "1")
}
record(mbbo, "$(P)$(R)ColorMode")
{
    field(DISA, "1")
}
record(mbbi, "$(P)$(R)ColorMode_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)BinX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)BinX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)BinY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)BinY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)MinX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)MinX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)MinY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)MinY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)SizeX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)SizeX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)SizeY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)SizeY_RBV")
{
    field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseX")
{
    field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseX_RBV")
{
    field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseY")
{
    field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)NumExposures")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)NumExposures_RBV")
{
    field(DISA, "1")
}
record(ao, "$(P)$(R)AcquirePeriod")
{
    field(DISA, "1")
}
record(ai, "$(P)$(R)AcquirePeriod_RBV")
{
    field(DISA, "1")
}
record(mbbo, "$(P)$(R)ImageMode")
{
    field(DISA, "1")
}
record(mbbi, "$(P)$(R)ImageMode_RBV")
{
    field(DISA, "1")
}
record(ao, "$(P)$(R)Gain")
{
    field(DISA, "1")
}
record(ai, "$(P)$(R)Gain_RBV")
{
    field(DISA, "1")
}
